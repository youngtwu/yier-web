package com.yier.platform.controller;

import com.google.common.collect.Lists;
import com.yier.platform.annotation.ApiCheck;
import com.yier.platform.common.jsonResponse.CommonResponse;
import com.yier.platform.common.jsonResponse.ListResponse;
import com.yier.platform.common.model.*;
import com.yier.platform.common.requestParam.BaseRequest;
import com.yier.platform.common.requestParam.ChatStateRequest;
import com.yier.platform.common.requestParam.DoctorRequest;
import com.yier.platform.common.typeEnum.EvaluationType;
import com.yier.platform.common.util.IPUtils;
import com.yier.platform.common.util.RandomUtils;
import com.yier.platform.service.DoctorService;
import com.yier.platform.service.SmsService;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

@ApiModel(value = "医生相关的请求接口")
@RestController
@RequestMapping("/doctor")
@Slf4j
public class DoctorController {
    @Autowired
    private DoctorService serviceDoctorService;
    @Autowired
    private SmsService smsService;

    @ApiOperation(value = "修改上传用户头像或近照图片")
    @ApiCheck(check = true)
    @RequestMapping(value = "/adjustDoctorInfo.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<String> adjustDoctorInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam(value = "file", required = true) MultipartFile file,
                                                   @ApiParam(value = "用户Id") @RequestParam(value = "id", required = true) Long id,
                                                   @ApiParam(value = "用途：avatar 表示修改头像 photo 表示上传近照") @RequestParam(value = "use", required = true) String use) {

        CommonResponse<String> res = new CommonResponse<String>();
        Doctor record = serviceDoctorService.adjustDoctorInfo(file, id, use);
        res.setData(record.getAvatarUrl());
        log.info(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过用户手机号码获取对应的手机验证码")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getVerifyCode.json", method = {RequestMethod.GET})
    public CommonResponse<String> getVerifyCode(HttpServletRequest request, HttpServletResponse response,
                                                @ApiParam(value = "手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                @ApiParam(value = "用途:0 表示注册[用户不能存在] 1 表示修改手机号[用户已经存在]") @RequestParam(value = "useType", required = true) String useType) {
        CommonResponse<String> result = new CommonResponse<String>();
        this.serviceDoctorService.verifyPhoneNumber(phoneNumber, useType);
        int length = 4;
        String validationCode = RandomUtils.randomNumeric(length);
        String clientIP = IPUtils.getIpAddress(request);
        smsService.sendSms(phoneNumber, 2L, validationCode, useType, clientIP);
        result.setData("[正式接口不会显示此机密内容]目前的验证码是：" + validationCode);
        return result;
    }

    @ApiOperation(value = "用户注册接口[插入数据时的实名认证]")
    @ApiCheck(check = false)
    @RequestMapping(value = "/register.json", method = {RequestMethod.POST})
    public CommonResponse<Doctor> register(@RequestBody Doctor record, HttpServletRequest request, HttpServletResponse response) {
        CommonResponse<Doctor> result = new CommonResponse<Doctor>();
        String osType = IPUtils.getHeaderValueByKey(request, "osType", "unknownOrH5");
        DoctorPo po = this.serviceDoctorService.insertDoctorSelective(record, osType);
        result.setData(po);
        return result;
    }

    @ApiOperation(value = "通过用户Id重新刷新融云token")
    @ApiCheck(check = true)
    @RequestMapping(value = "/refreshToken.json", method = {RequestMethod.POST})
    public CommonResponse<String> refreshToken(HttpServletRequest request, HttpServletResponse response,
                                               @ApiParam(value = "医生id") @RequestParam(value = "id", required = true) long id) {
        CommonResponse<String> result = new CommonResponse<String>();
        Doctor record = serviceDoctorService.selectByPrimaryKey(id);
        String token = serviceDoctorService.updateImtoken(record, true);
        result.setData(token);
        return result;
    }

    @ApiOperation(value = "通过手机号及验证码登录返回用户信息")
    @ApiCheck(check = false)
    @RequestMapping(value = "/loginByVerifyCode.json", method = {RequestMethod.POST})
    public CommonResponse<DoctorPo> loginByVerifyCode(HttpServletRequest request, HttpServletResponse response,
                                                      @ApiParam(value = "手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                      @ApiParam(value = "验证码") @RequestParam(value = "verifyCode", required = true) String verifyCode) {
        CommonResponse<DoctorPo> result = new CommonResponse<DoctorPo>();
        DoctorRequest params = new DoctorRequest();
        params.setPhoneNumber(phoneNumber);
        String osType = IPUtils.getHeaderValueByKey(request, "osType", "unknownOrH5");
        result.setData(serviceDoctorService.loginByVerifyCode(params, verifyCode, osType));
        return result;
    }

    @ApiOperation(value = "通过手机号及密码登录返回用户信息,如果传递onlyVerify=true，仅仅是验证不重新分配token等信息")
    @ApiCheck(check = false)
    @RequestMapping(value = "/loginByPassword.json", method = {RequestMethod.POST})
    public CommonResponse<DoctorPo> loginByPassword(HttpServletRequest request, HttpServletResponse response,
                                                    @ApiParam(value = "手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                    @ApiParam(value = "密码") @RequestParam(value = "password", required = true) String password,
                                                    @ApiParam(value = "是否只是手机密码验证") @RequestParam(value = "onlyVerify", required = false, defaultValue = "false") boolean onlyVerify) {
        CommonResponse<DoctorPo> result = new CommonResponse<DoctorPo>();
        DoctorRequest params = new DoctorRequest();
        params.setPhoneNumber(phoneNumber);
        String osType = IPUtils.getHeaderValueByKey(request, "osType", "unknownOrH5");
        result.setData(serviceDoctorService.loginByPassword(params, password, osType, onlyVerify));
        return result;
    }

    @ApiOperation(value = "验证手机号码跟验证码是否可注册")
    @ApiCheck(check = false)
    @RequestMapping(value = "/verifyPhoneNumberAndVerifyCode.json", method = {RequestMethod.POST})
    public CommonResponse<DoctorPo> verifyPhoneNumberAndVerifyCode(HttpServletRequest request, HttpServletResponse response,
                                                                   @ApiParam(value = "手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                                   @ApiParam(value = "验证码") @RequestParam(value = "verifyCode", required = true) String verifyCode,
                                                                   @ApiParam(value = "用途:0 表示注册[用户不能存在] 1 表示修改手机号[用户已经存在]") @RequestParam(value = "useType", required = true) String useType) {
        smsService.checkCode(phoneNumber, 2L, verifyCode);//验证码验证
        CommonResponse<DoctorPo> result = new CommonResponse<DoctorPo>();
        DoctorRequest params = new DoctorRequest();
        params.setPhoneNumber(phoneNumber);
        List<DoctorPo> list = serviceDoctorService.verifyPhoneNumber(phoneNumber, useType);
        if (StringUtils.equals("1", useType)) {
            result.setData(list.get(0));
        }
        log.info(result.toJsonString());
        return result;
    }


    @ApiOperation(value = "更换手机号码时输入实名信息获取目前ID")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getIdByTrueInfo.json", method = {RequestMethod.GET})
    public CommonResponse<Long> getIdAndByTrueInfo(HttpServletRequest request, HttpServletResponse response,
                                                   @ApiParam(value = "手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                   @ApiParam(value = "真实姓名") @RequestParam(value = "trueName", required = true) String trueName,
                                                   @ApiParam(value = "身份证号") @RequestParam(value = "idCardNo", required = true) String idCardNo) {
        CommonResponse<Long> result = new CommonResponse<Long>();
        result.setData(serviceDoctorService.getIdByTrueInfo(phoneNumber, trueName, idCardNo));
        return result;
    }


    @ApiOperation(value = "验证手机号码跟验证码是否正确，然后直接更新手机号码")
    @ApiCheck(check = false)
    @RequestMapping(value = "/verifyPhoneNumberAndCodeThenSave.json", method = {RequestMethod.POST})
    public CommonResponse<Doctor> verifyPhoneNumberCodeThenSave(HttpServletRequest request, HttpServletResponse response,
                                                                @ApiParam(value = "要修改的手机号码") @RequestParam(value = "phoneNumber", required = true) String phoneNumber,
                                                                @ApiParam(value = "验证码") @RequestParam(value = "verifyCode", required = true) String verifyCode,
                                                                @ApiParam(value = "要修改的信息id") @RequestParam(value = "id", required = true) long id) {
        CommonResponse<Doctor> result = new CommonResponse<Doctor>();
        result.setData(serviceDoctorService.updatePhoneNumberByVerifyCodeId(phoneNumber, verifyCode, id));
        return result;
    }

    @ApiOperation(value = "通过用户Id，验证原登录密码是否正确，然后直接更新新登录密码")
    @ApiCheck(check = false)
    @RequestMapping(value = "/verifyPasswordNewOldThenSave.json", method = {RequestMethod.POST})
    public CommonResponse<Doctor> verifyPasswordNewOldThenSave(HttpServletRequest request, HttpServletResponse response,
                                                               @ApiParam(value = "原登录密码") @RequestParam(value = "passwordOld", required = true) String passwordOld,
                                                               @ApiParam(value = "新登录密码") @RequestParam(value = "password", required = true) String password,
                                                               @ApiParam(value = "要修改的信息id") @RequestParam(value = "id", required = true) long id) {
        CommonResponse<Doctor> result = new CommonResponse<Doctor>();
        result.setData(serviceDoctorService.updatePasswordById(passwordOld, password, id));
        return result;
    }

    @ApiOperation(value = "调整注册信息，更换手机号码，需要上传图片后端审核")
    @ApiCheck(check = false)
    @RequestMapping(value = "/adjustRegisterInfo.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<String> adjustRegisterInfo(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "图片文件") @RequestParam(value = "file", required = true) MultipartFile file,
                                                     @ApiParam(value = "要修改的用户Id") @RequestParam(value = "id", required = true) Long id,
                                                     @ApiParam(value = "要修改的手机号码") @RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
                                                     @ApiParam(value = "要修改的密码") @RequestParam(value = "password", required = false, defaultValue = "") String password,
                                                     @ApiParam(value = "是否要审核验证") @RequestParam(value = "check", required = false, defaultValue = "true") boolean check) {
        CommonResponse<String> res = new CommonResponse<String>();
        Doctor record = this.serviceDoctorService.adjustRegisterInfo(file, id, phoneNumber, password,check);
        res.setData(record.getCheckUrl());
        log.info(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "修改更新密码等信息，除图片信息")
    @ApiCheck(check = false)
    @RequestMapping(value = "/updateDoctor.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Doctor> updateDoctor(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生body信息") @RequestBody Doctor record) {
        CommonResponse<Doctor> result = new CommonResponse<Doctor>();
        this.serviceDoctorService.updateAnyInfoById(record);
        result.setData(record);
        return result;
    }

    @ApiOperation(value = "开通或关闭医生聊天设定对应的影响：推送，延迟，提醒等")
    @ApiCheck(check = true)
    @RequestMapping(value = "/setDoctorChat.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<String> setDoctorChat(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "聊天状态body信息") @RequestBody ChatStateRequest params) {
        CommonResponse<String> result = new CommonResponse<String>();
        result.setData(this.serviceDoctorService.updateChatState(params));
        return result;
    }

    @ApiOperation(value = "获取我的按照医生分组评价列表")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getEvaluationWithGroupDoctorContentList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorEvaluationPo> getEvaluationWithGroupDoctorContentList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        ListResponse<DoctorEvaluationPo> res = new ListResponse<DoctorEvaluationPo>();
        res.setData(this.serviceDoctorService.listEvaluationWithGroupDoctorContent(params));
        res.setTotal(this.serviceDoctorService.listEvaluationWithGroupDoctorContentCount(params));
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "获取我的医生评价列表")
    @ApiCheck(check = true)
    @RequestMapping(value = "/getEvaluationWithDoctorContentList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorEvaluationPo> getEvaluationWithDoctorContentList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        ListResponse<DoctorEvaluationPo> res = new ListResponse<DoctorEvaluationPo>();
        res.setData(this.serviceDoctorService.listEvaluationWithDoctorContent(params));
        res.setTotal(this.serviceDoctorService.listEvaluationWithDoctorContentCount(params));
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "获取ID对应的医生评价")
    @ApiCheck(check = true)
    @RequestMapping(value = "/getDoctorEvaluationPoWithDoctorById.json", method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<DoctorEvaluationPo> getDoctorEvaluationPoWithDoctorById(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "评价ID") @RequestParam(value = "id", required = true) Long id) {
        CommonResponse<DoctorEvaluationPo> res = new CommonResponse<DoctorEvaluationPo>();
        res.setData(this.serviceDoctorService.getDoctorEvaluationPoWithDoctorById(id));
        log.info(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "获取医生评价列表")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getDoctorEvaluationPoList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorEvaluationPo> getDoctorEvaluationPoList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        ListResponse<DoctorEvaluationPo> res = new ListResponse<DoctorEvaluationPo>();
        res.setData(this.serviceDoctorService.listDoctorEvaluationPo(params));
        res.setTotal(this.serviceDoctorService.listDoctorEvaluationPoCount(params));
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "获取医生评价类型列表")
    @ApiCheck(check = true)
    @RequestMapping(value = "/getEvaluationTypeList.json", method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<MutableTriple<Integer, String, String>> getEvaluationTypeList(HttpServletRequest request, HttpServletResponse response) {
        ListResponse<MutableTriple<Integer, String, String>> res = new ListResponse<MutableTriple<Integer, String, String>>();
        List<MutableTriple<Integer, String, String>> list = Lists.newArrayList();
        for (EvaluationType item : EvaluationType.values()) {
            if (item.getType() == "-1") {
                continue;
            }
            list.add(new MutableTriple(item.getType(), item.getDesc(), "其他支持多选"));
        }
        res.setData(list);
        log.debug(res.toJsonString());
        return res;
    }


    @ApiOperation(value = "通过id获取医生信息，包括评价情况")
    @ApiCheck(check = true)
    @RequestMapping(value = "/getDoctorPoEvaluationCase.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<DoctorPo> getDoctorPoEvaluationCase(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        log.info("getDoctorPoEvaluationCase.json ，包括评价情况,params:{}",params);
        CommonResponse<DoctorPo> res = new CommonResponse<DoctorPo>();
        DoctorPo p = serviceDoctorService.getDoctorPoWithHospitalDepartmentAndEvaluationList(params);
        res.setData(p);
        log.info(res.toJsonString());
        return res;
    }


    @ApiOperation(value = "插入医生评价")
    @ApiCheck(check = true)
    @RequestMapping(value = "/insertDoctorEvaluation.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<DoctorEvaluation> insertDoctorEvaluation(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生body信息") @RequestBody DoctorEvaluation record) {
        CommonResponse<DoctorEvaluation> res = new CommonResponse<DoctorEvaluation>();
        log.info("目前插入条件是：{}", record);
        serviceDoctorService.insertDoctorEvaluation(record);
        res.setData(record);
        log.info(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过科室等条件查询获取可预约上门就诊医生信息列表")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getMedicalDoctorPoList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorPo> getMedicalDoctorPoList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        log.info("通过条件查询获取医生信息列表,目前分页条件如下：{}", params);
        ListResponse<DoctorPo> res = new ListResponse<DoctorPo>();
        List<DoctorPo> list = serviceDoctorService.listMedicalDoctorPo(params);
        int count = serviceDoctorService.listMedicalDoctorPoCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过条件查询获取医生信息列表")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getDoctorPoList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorPo> getDoctorPoList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        params.doWithSortOrStart();
        log.info("通过条件查询获取医生信息列表,目前分页条件如下：", params);
        ListResponse<DoctorPo> res = new ListResponse<DoctorPo>();
        List<DoctorPo> list = serviceDoctorService.listDoctorPo(params);
        int count = serviceDoctorService.listDoctorPoCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过id获取医生信息，包括职位，职业点")
    @ApiCheck(check = true)
    @RequestMapping(value = "/getDoctorPoById.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<DoctorPo> getDoctorPoById(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生请求接口类") @RequestBody DoctorRequest params) {
        CommonResponse<DoctorPo> res = new CommonResponse<DoctorPo>();
        log.info("通过id获取医生信息查询条件:{}", params);
        DoctorPo p = serviceDoctorService.getDoctorPoById(params);
        res.setData(p);
        log.info("通过id获取医生信息查询条件:{}",res);
        return res;
    }


    @ApiOperation(value = "通过id获取医生信息，包括职位，职业点")
    @ApiCheck(check = true)
    @RequestMapping(value = "/selectByPrimaryKey.json", method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Doctor> selectByPrimaryKey(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "医生ID") @RequestParam(value = "id", required = true) Long id) {
        CommonResponse<Doctor> res = new CommonResponse<Doctor>();
        Doctor p = serviceDoctorService.selectByPrimaryKey(id);
        Assert.isTrue(p != null, "不存在该医生");
        res.setData(p);
        log.info(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过条件查询获取医生职称信息列表")
    @ApiCheck(check = false)
    @RequestMapping(value = "/getDoctorTitleList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<DoctorTitle> getDoctorTitleList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "基本请求接口类") @RequestBody BaseRequest params) {
        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<DoctorTitle> res = new ListResponse<DoctorTitle>();
        List<DoctorTitle> list = serviceDoctorService.listDoctorTitle(params);
        int count = serviceDoctorService.listDoctorTitleCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }
}
