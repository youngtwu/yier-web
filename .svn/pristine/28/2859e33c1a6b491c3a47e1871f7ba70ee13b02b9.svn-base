package com.yier.platform.service.medical;

import com.fasterxml.jackson.core.type.TypeReference;
import com.github.yingzhuo.carnival.id.IdGenerator;
import com.google.common.collect.Lists;
import com.yier.platform.common.costant.ConstantAll;
import com.yier.platform.common.model.*;
import com.yier.platform.common.requestParam.DrugSendOrderRequest;
import com.yier.platform.common.requestParam.MedicalPrescriptionRequest;
import com.yier.platform.common.requestParam.OrderDrugsRequest;
import com.yier.platform.common.util.JsonUtils;
import com.yier.platform.common.util.Utils;
import com.yier.platform.dao.DrugSendOrderMapper;
import com.yier.platform.service.PharmacyService;
import com.yier.platform.service.RedisLogService;
import com.yier.platform.service.RedisService;
import com.yier.platform.service.feign.RemoteService;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;


@Service
public class DrugSendOrderService {
    private final Logger logger = LoggerFactory.getLogger(DrugSendOrderService.class);
    @Autowired
    private DrugSendOrderMapper daoDrugSendOrderMapper;
    @Autowired
    private DrugAcceptOrderService drugAcceptOrderService;
    @Autowired
    private DrugAcceptPrescriptionService drugAcceptPrescriptionService;
    @Autowired
    private IdGenerator<Long> idGenerator;
    @Autowired
    private RemoteService remoteService;
    @Autowired
    private MedicalPrescriptionService medicalPrescriptionService;
    @Autowired
    private PharmacyService pharmacyService;
    @Autowired
    private MedicalOrderService medicalOrderService;
    @Autowired
    private OrderDrugsService orderDrugsService;
    @Autowired
    private RedisService redisService;
    @Autowired
    private RedisLogService redisLogService;//缓存log记录情况

    public List<DrugSendOrderPo> drugSendOrderListWithDrug(DrugSendOrderRequest params){
        List<DrugSendOrderPo> drugSendOrderPoList = daoDrugSendOrderMapper.listDrugSendOrderPo(params);
        drugSendOrderPoList.forEach(so->{
            so.setPrescriptionIdList(Arrays.asList(so.getPrescriptionId().split(",")));
            OrderDrugsRequest orderDrugsRequest = new OrderDrugsRequest();
            orderDrugsRequest.setPrescriptionIdList(so.getPrescriptionIdList());
            orderDrugsRequest.setStatus(ConstantAll.STATUS_0);
            so.setDrugList(orderDrugsService.listOrderDrugs(orderDrugsRequest));
        });
        return drugSendOrderPoList;
    }

    @ApiOperation(value = "取消患者送药订单")
    @Transactional
    public void drugSendOrderCancel(DrugSendOrder record){
        Assert.isTrue(record.getId() != null , "请传递参数取药订单 id");
        DrugSendOrder currentDrugSendOrder = this.selectByPrimaryKey(record.getId());
        Assert.isTrue(StringUtils.equalsIgnoreCase(currentDrugSendOrder.getSendStatus(),ConstantAll.SEND_ORDER_STATUS_APPPOINT),"只有[待支付]的订单方可操作! 目前状态是:"+ currentDrugSendOrder.getSendStatus());

        List<String> prescriptionIdStringList =  Arrays.asList(currentDrugSendOrder.getPrescriptionId().split(","));
        Date currentDate = new Date();
        record.setGmtModified(currentDate);
        record.setRemarks("送药取消支付");
        record.setSendStatus(ConstantAll.SEND_ORDER_STATUS_PATIENT_PAYMENT_CANCEL);
        this.updateByPrimaryKeySelective(record);

        List<Long> medicalPrescriptionIdList = Arrays.asList(currentDrugSendOrder.getMedicalPrescriptionId().split(",")).stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
        this.medicalPrescriptionService.updateKeyTimeOutTakeOrSendOrder(medicalPrescriptionIdList,ConstantAll.TAKE_SEND_PRESCRIPTION_LOCK_CANCEL_ORDER,"送药取消支付,多个处方合并情况:"+ medicalPrescriptionIdList," 送药取消支付",currentDate);

    }
    @ApiOperation(value = "创建患者送药订单支付成功")
    @Transactional
    public void drugSendOrderPaymentOk(DrugSendOrder record){
        Assert.isTrue(record.getId() != null , "请传递参数送药订单 id");
        DrugSendOrder currentDrugSendOrder = this.selectByPrimaryKey(record.getId());
        Assert.isTrue(StringUtils.equalsIgnoreCase(currentDrugSendOrder.getSendStatus(),ConstantAll.SEND_ORDER_STATUS_APPPOINT),"只有[待支付]的订单方可操作! 目前状态是:"+ currentDrugSendOrder.getSendStatus());
        List<String> prescriptionIdStringList =  Arrays.asList(currentDrugSendOrder.getPrescriptionId().split(","));
        MedicalPrescriptionRequest params = new MedicalPrescriptionRequest();
        params.setPrescriptionIdList(prescriptionIdStringList);
        List<MedicalPrescriptionPo> medicalPrescriptionPoList =  medicalPrescriptionService.listMedicalPrescriptionPo(params);


        int shipPayment = 2000;
        //left:药库Id，middle:同个药库下的处方,right:对应药品的价格
        List<MutableTriple<String,List<MedicalPrescriptionPo>,Integer>> prescriptionIdListByPharmacyId = Lists.newArrayList();
        medicalPrescriptionPoList.forEach(p->{

            //按照药房ID:left ,规整 成 处方列表:middle ,药品总价 :right
            MutableTriple<String,List<MedicalPrescriptionPo>,Integer> prescriptionIdByPharmacyId = prescriptionIdListByPharmacyId.stream().filter(pp->StringUtils.equalsIgnoreCase(pp.left,p.getPharmacyId())).findFirst().orElse(null);
            logger.info("目前处方列表：{}",prescriptionIdByPharmacyId);
            if(prescriptionIdByPharmacyId==null){
                prescriptionIdByPharmacyId = new MutableTriple<String,List<MedicalPrescriptionPo>,Integer>();
                prescriptionIdByPharmacyId.left = p.getPharmacyId();// prescriptionIdByPharmacyId.setLeft(p.getPharmacyId());
                logger.info("两个信息：left:{} left。{}",p.getPharmacyId(),prescriptionIdByPharmacyId.left);
                List<MedicalPrescriptionPo> prescriptionsGroupByPharmacyId = Lists.newArrayList();
                prescriptionsGroupByPharmacyId.add(p);
                prescriptionIdByPharmacyId.middle = prescriptionsGroupByPharmacyId;//  prescriptionIdByPharmacyId.setMiddle(prescriptionsGroupByPharmacyId);
                final OrderDrugs orderDrugs =new OrderDrugs();
                orderDrugs.setCostPrice(0);
                p.getDrugList().forEach(d->{

                    orderDrugs.setCostPrice(d.getCostPrice().intValue()*d.getDrugCount()+orderDrugs.getCostPrice().intValue());
                });
                prescriptionIdByPharmacyId.right = orderDrugs.getCostPrice();// prescriptionIdByPharmacyId.setRight(orderDrugs.getCostPrice());
                prescriptionIdListByPharmacyId.add(prescriptionIdByPharmacyId);
            }
            else{
                prescriptionIdByPharmacyId.middle.add(p);
                final OrderDrugs orderDrugs =new OrderDrugs();
                orderDrugs.setCostPrice(0);
                p.getDrugList().forEach(d->{
                    orderDrugs.setCostPrice(d.getCostPrice().intValue()*d.getDrugCount()+orderDrugs.getCostPrice());
                });
                prescriptionIdByPharmacyId.right += orderDrugs.getCostPrice().intValue();//  prescriptionIdByPharmacyId.setRight(prescriptionIdByPharmacyId.right.intValue() + orderDrugs.getCostPrice().intValue());
            }
        });
        Date currentDate = new Date();
        Date compareDate = Utils.getDayTimeHHmmss(currentDate,12,0,0);
        List<Pharmacy> listAllPharmacy  = pharmacyService.getListAllPharmacy();
        logger.info("自己生产的列表 prescriptionIdListByPharmacyId:{}",prescriptionIdListByPharmacyId);
        List<String> orderNoList = Lists.newArrayList();
        List<String> prescriptionIdList = Lists.newArrayList();
        prescriptionIdListByPharmacyId.forEach(pGroupByPharmacyId->{
            Pharmacy pharmacy = listAllPharmacy.stream().filter(t->t.getId().toString().equalsIgnoreCase(pGroupByPharmacyId.getLeft())).findFirst().orElse(null);
            Assert.isTrue(pharmacy!=null,"您目前处方中的药房目前并不存在!");
            DrugAcceptOrder drugAcceptOrder = new DrugAcceptOrder();
            String acceptOrderNo = idGenerator.nextId().toString();
            drugAcceptOrder.setAcceptOrderNo(acceptOrderNo);
            drugAcceptOrder.setSendOrderNo(currentDrugSendOrder.getSendOrderNo());
            drugAcceptOrder.setPharmacyId(pGroupByPharmacyId.left);
            drugAcceptOrder.setPharmacyName(pharmacy.getName());
            drugAcceptOrder.setPharmacyAddress(pharmacy.getAddress());
            drugAcceptOrder.setPharmacyContact(pharmacy.getContact());
            drugAcceptOrder.setPatientId(currentDrugSendOrder.getPatientId());
            drugAcceptOrder.setPatientAddressSummary(currentDrugSendOrder.getPatientAddressSummary());
            drugAcceptOrder.setPatientAddress(currentDrugSendOrder.getPatientAddress());
            drugAcceptOrder.setPatientContact(currentDrugSendOrder.getPatientContact());
            drugAcceptOrder.setPatientIdCardNo(currentDrugSendOrder.getPatientIdCardNo());
            drugAcceptOrder.setPatientName(currentDrugSendOrder.getPatientName());
            drugAcceptOrder.setPatientSex(currentDrugSendOrder.getPatientSex());
            drugAcceptOrder.setPatientYearOld(currentDrugSendOrder.getPatientYearOld());
            drugAcceptOrder.setPayment(pGroupByPharmacyId.right+shipPayment);
            drugAcceptOrder.setShipPayment(shipPayment);
            drugAcceptOrder.setAcceptStatus(ConstantAll.ACCEPT_ORDER_STATUS_PAYMENT);
            drugAcceptOrder.setGmtModified(currentDate);
            if(currentDate.getTime()-compareDate.getTime()>0){
                drugAcceptOrder.setPlanTime(Utils.getDayTimeHHmmss(currentDate,1,20,0,0));//下一天的20点前
            }
            else{
                drugAcceptOrder.setPlanTime(Utils.getDayTimeHHmmss(currentDate,1,12,0,0));//下一天的12点前
            }
            drugAcceptOrder.setRemarks("药师送药受理订单");
            orderNoList.clear();
            prescriptionIdList.clear();
            pGroupByPharmacyId.middle.forEach(p->{
                orderNoList.add(p.getOrderNo());
                prescriptionIdList.add(p.getPrescriptionId());
                DrugAcceptPrescription drugAcceptPrescription = new DrugAcceptPrescription();
                drugAcceptPrescription.setPrescriptionId(p.getPrescriptionId());
                drugAcceptPrescription.setOrderNo(p.getOrderNo());
                drugAcceptPrescription.setSendOrderNo(currentDrugSendOrder.getSendOrderNo());
                drugAcceptPrescription.setAcceptOrderNo(acceptOrderNo);
                drugAcceptPrescription.setMedicalOrderId(p.getMedicalOrderId());
                drugAcceptPrescription.setMedicalPrescriptionId(p.getId());
                drugAcceptPrescription.setPatientId(currentDrugSendOrder.getPatientId());
                drugAcceptPrescription.setPatientIdCardNo(currentDrugSendOrder.getPatientIdCardNo());
                drugAcceptPrescription.setPatientName(currentDrugSendOrder.getPatientName());
                drugAcceptPrescription.setPharmacyId(pharmacy.getId().toString());
                drugAcceptPrescription.setPharmacyName(pharmacy.getName());
                drugAcceptPrescription.setPharmacyAddress(pharmacy.getAddress());
                drugAcceptPrescription.setPharmacyContact(pharmacy.getContact());
                drugAcceptPrescription.setGmtModified(currentDate);
                drugAcceptPrescription.setRemarks("创建送药订单，药师送药受理单 与处方的关系");
                this.drugAcceptPrescriptionService.insertSelective(drugAcceptPrescription);
            });
            drugAcceptOrder.setOrderNo(StringUtils.join(orderNoList.toArray(),","));
            drugAcceptOrder.setPrescriptionId(StringUtils.join(prescriptionIdList.toArray(),","));
            this.drugAcceptOrderService.insertSelective(drugAcceptOrder);

            record.setPlanTime(drugAcceptOrder.getPlanTime());
        });
        record.setGmtModified(currentDate);
        record.setRemarks("送药付款成功-同时药师送药接受单创建已经成功");
        record.setSendStatus(ConstantAll.SEND_ORDER_STATUS_PAYMENT);
        this.updateByPrimaryKeySelective(record);

        DrugAcceptOrder drugAcceptOrder = new DrugAcceptOrder();
        drugAcceptOrder.setSendOrderNo(record.getSendOrderNo());//按照患者下订单为驱动更新
        drugAcceptOrder.setAcceptStatus(ConstantAll.ACCEPT_ORDER_STATUS_PAYMENT);
        drugAcceptOrder.setGmtModified(currentDate);
        drugAcceptOrderService.updateBatchByCondition(drugAcceptOrder);


        MedicalPrescription medicalPrescription = new MedicalPrescription();
        medicalPrescription.setGmtModified(new Date());
        medicalPrescription.setStatusDetail(ConstantAll.MEDICAL_PRESCRIPTION_STATUS_PATIENT_PAYMENT_OK);
        medicalPrescription.setRemarks("送药付款成功-同时药师送药接受单创建已经成功");
        medicalPrescription.setPrescriptionIdList(prescriptionIdStringList);
        this.medicalPrescriptionService.updateBatchByCondition(medicalPrescription);


        //java8新特性之逗号分隔字符串转List<Long>
        List<Long> medicalPrescriptionIdList = Arrays.asList(currentDrugSendOrder.getMedicalPrescriptionId().split(",")).stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
        this.medicalPrescriptionService.updateKeyTimeOutTakeOrSendOrder(medicalPrescriptionIdList,ConstantAll.TAKE_SEND_PRESCRIPTION_LOCK_PAYMENT_ORDER,"送药付款成功,多个处方合并情况:"+ medicalPrescriptionIdList," 送药付款成功",currentDate);


    }
    @ApiOperation(value = "创建患者送药订单")
    @Transactional
    public DrugSendOrder drugSendOrderCreate(DrugSendOrder record){
        Assert.isTrue(record.getPrescriptionIdList()!=null,"请传递药品列表");
        Assert.isTrue(record.getPatientId()!=null,"请传递patientId");
        Assert.isTrue(record.getPatientAddress()!=null,"请传递patientAddress");
        Assert.isTrue(record.getPatientAddressSummary()!=null,"请传递patientAddressSummary");
        Assert.isTrue(record.getPatientContact()!=null,"请传递patientContact");
        Assert.isTrue(record.getPatientName()!=null,"请传递patientName");
        logger.info("目前传递过来的送药信息：{}",record);
        MedicalPrescriptionRequest params = new MedicalPrescriptionRequest();
        params.setPrescriptionIdList(record.getPrescriptionIdList());
        List<MedicalPrescriptionPo> medicalPrescriptionPoList =  medicalPrescriptionService.listMedicalPrescriptionPo(params);
        String sendOrderNo = idGenerator.nextId().toString();
        record.setSendOrderNo(sendOrderNo);
        Date currentDate = new Date();


        int shipPayment = 2000;
        List<String> orderNoList = Lists.newArrayList();
        List<String> prescriptionIdList = Lists.newArrayList();
        List<Long> medicalPrescriptionIdList = Lists.newArrayList();
        //left:药库Id，middle:同个药库下的处方,right:对应药品的价格
        final OrderDrugs orderDrugs =new OrderDrugs();
        orderDrugs.setCostPrice(0);
        List<MutableTriple<String,List<MedicalPrescriptionPo>,Integer>> prescriptionIdListByPharmacyId = Lists.newArrayList();
        medicalPrescriptionPoList.forEach(p->{
            logger.info("处方信息：{}",p);
            orderNoList.add(p.getOrderNo());
            prescriptionIdList.add(p.getPrescriptionId());
            medicalPrescriptionIdList.add(p.getId());

            MutableTriple<String,List<MedicalPrescriptionPo>,Integer> prescriptionIdByPharmacyId = prescriptionIdListByPharmacyId.stream().filter(pp->StringUtils.equalsIgnoreCase(pp.left,p.getPharmacyId())).findFirst().orElse(null);
            logger.info("目前处方列表：{}",prescriptionIdByPharmacyId);
            if(prescriptionIdByPharmacyId==null){
                prescriptionIdByPharmacyId = new MutableTriple<String,List<MedicalPrescriptionPo>,Integer>();
                prescriptionIdByPharmacyId.left = p.getPharmacyId();// prescriptionIdByPharmacyId.setLeft(p.getPharmacyId());
                logger.info("两个信息：left:{} left{}",p.getPharmacyId(),prescriptionIdByPharmacyId.left);
                List<MedicalPrescriptionPo> prescriptionsGroupByPharmacyId = Lists.newArrayList();
                prescriptionsGroupByPharmacyId.add(p);
                prescriptionIdByPharmacyId.middle = prescriptionsGroupByPharmacyId;//  prescriptionIdByPharmacyId.setMiddle(prescriptionsGroupByPharmacyId);
                p.getDrugList().forEach(d->{
                    orderDrugs.setCostPrice(d.getCostPrice().intValue()*d.getDrugCount()+orderDrugs.getCostPrice().intValue());
                });
                prescriptionIdByPharmacyId.right = orderDrugs.getCostPrice();// prescriptionIdByPharmacyId.setRight(orderDrugs.getCostPrice());
                prescriptionIdListByPharmacyId.add(prescriptionIdByPharmacyId);
            }
            else{
                prescriptionIdByPharmacyId.middle.add(p);
                p.getDrugList().forEach(d->{
                    orderDrugs.setCostPrice(d.getCostPrice().intValue()*d.getDrugCount()+orderDrugs.getCostPrice());
                });
                prescriptionIdByPharmacyId.right += orderDrugs.getCostPrice().intValue();//  prescriptionIdByPharmacyId.setRight(prescriptionIdByPharmacyId.right.intValue() + orderDrugs.getCostPrice().intValue());
            }
            record.setPatientId(p.getPatientId());
            record.setPatientIdCardNo(p.getPatientIdCardNo());
            record.setPatientSex(p.getPatientSex());
            record.setPatientYearOld(p.getPatientYearOld());
        });
        record.setOrderNo(StringUtils.join(orderNoList.toArray(),","));
        record.setPrescriptionId(StringUtils.join(prescriptionIdList.toArray(),","));
        record.setMedicalPrescriptionId(StringUtils.join(medicalPrescriptionIdList.toArray(),",")+",");
        record.setShipPayment(shipPayment*prescriptionIdListByPharmacyId.size());
        record.setPayment(orderDrugs.getCostPrice().intValue()+record.getShipPayment().intValue());
        record.setGmtModified(currentDate);
        record.setSendStatus(ConstantAll.SEND_ORDER_STATUS_APPPOINT);
        record.setRemarks("客户送药订单创建成功");
        this.insertSelective(record);
        record.setRemind(""+ConstantAll.VALUE_PAYMENT_LOCK);

        this.medicalPrescriptionService.updateKeyTimeOutTakeOrSendOrder(medicalPrescriptionIdList,ConstantAll.TAKE_SEND_PRESCRIPTION_LOCK_NEW_ORDER,"送药下单,多个处方合并情况:"+ medicalPrescriptionIdList," 送药下单",currentDate);

        return record;
    }
    // 根据条件查询送药的列表
    public List<DrugSendOrderPo> listDrugSendOrderPo(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderPo(params);
    }
    // 根据条件查询送药的列表 总数
    public int listDrugSendOrderPoCount(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderCount(params);
    }

    public DrugSendOrderPo getDrugSendOrderPoById(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.getDrugSendOrderPoById(params);
    }
    // 根据条件查询列表
    public List<DrugSendOrder> listDrugSendOrder(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrder(params);
    }
    // 根据条件查询列表 总数
    public int listDrugSendOrderCount(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderCount(params);
    }
    //可能批量更新
    public int updateBatchByCondition(DrugSendOrder recordParams){
        return daoDrugSendOrderMapper.updateBatchByCondition(recordParams);
    }
    public int deleteByPrimaryKey(Long id){
        return daoDrugSendOrderMapper.deleteByPrimaryKey(id);
    }

    public int insertSelective(DrugSendOrder record){
        return daoDrugSendOrderMapper.insertSelective(record);
    }

    public DrugSendOrder selectByPrimaryKey(Long id){
        return daoDrugSendOrderMapper.selectByPrimaryKey(id);
    }

    public int updateByPrimaryKeySelective(DrugSendOrder record){
        return daoDrugSendOrderMapper.updateByPrimaryKeySelective(record);
    }

}