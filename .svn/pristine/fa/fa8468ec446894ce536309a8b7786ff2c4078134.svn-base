package com.yier.platform.task;

import com.fasterxml.jackson.core.type.TypeReference;
import com.google.common.collect.Lists;
import com.yier.platform.common.costant.ConstantAll;
import com.yier.platform.common.model.MedicalDate;
import com.yier.platform.common.util.JsonUtils;
import com.yier.platform.common.util.Utils;
import com.yier.platform.service.RedisService;
import com.yier.platform.service.medical.MedicalDateService;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.List;
import java.util.Set;

/**
 * 用于定期处理医疗方面的任务
 */
@Component  //是一个泛化的概念，仅仅表示一个组件 (Bean)
public class MedicalRedisTask {
    private static final Logger logger = LoggerFactory.getLogger(MedicalRedisTask.class);
    @Autowired
    private RedisService redisService;
    @Autowired
    private MedicalDateService medicalDateService;
    /**
     * 1分钟执行一次执行一次
     */
    @Scheduled(initialDelay = 6000, fixedRate =  60 * 1000) //初始化 延时5秒执行，每6小时执行一次
    //@Scheduled(initialDelay = 5000, fixedRate = 1 * 20 * 1000)
    public void orderAssignPharmacist() {
        Date current = new Date();
        medicalDateService.unLockForCondition(current);//可能释放锁定资源
/*

        logger.info(">>如果redis 有处方新订单列表 并且有平台药师锁定");//REDIS_PHARMACIST_PLAT
        logger.info(">>如果该平台药师还存在 说明在规定的2分内没有核定，记录惩罚表，移交并分配给其它平台药师列表");

        logger.info(">>如果redis 有处方新订单列表 或配置强硬要 考虑 才浪费去DB查询");
        logger.info(">>用于定期查看订单 条件status=0 prescription_status= now()-gmt_create>30 view_time is null");
        logger.info(">>平台药师列表中，分配个给处方，推送信息给药师；比较如果pharmacist_id 已经一直，相当于反复提醒，没有尽快处理");


        logger.info(">>如果redis 有处方新订单列表 并且有药师锁定");//REDIS_PHARMACIST_GRAB_ORDER
        logger.info(">>如果该药师还存在 说明在规定的3分内没有核定，记录惩罚表，移交并分配给平台药师列表");
*/

    }
}
