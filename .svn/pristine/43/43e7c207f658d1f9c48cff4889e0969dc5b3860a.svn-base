package com.yier.platform.service.medical;

import com.yier.platform.common.costant.ConstantAll;
import com.yier.platform.common.model.DrugAcceptOrder;
import com.yier.platform.common.model.DrugAcceptOrderPo;
import com.yier.platform.common.requestParam.DrugSendOrderRequest;
import com.yier.platform.dao.DrugAcceptOrderMapper;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import java.util.Date;
import java.util.List;

/**
 * 药师接受订单 service
 */
@Service
public class DrugAcceptOrderService {
    private final Logger logger = LoggerFactory.getLogger(DrugAcceptOrderService.class);
    @Autowired
    private DrugAcceptOrderMapper daoDrugAcceptOrderMapper;

    public DrugAcceptOrder createAcceptOrderToSendOK(DrugAcceptOrder record){
        Assert.isTrue(record.getId() != null , "请传递参数送药接受订单 id");
        DrugAcceptOrder currentOrder = this.selectByPrimaryKey(record.getId());
        Assert.isTrue(StringUtils.equalsIgnoreCase(currentOrder.getAcceptStatus(),ConstantAll.ACCEPT_ORDER_STATUS_SENDING),"只有[派送中]的订单方可操作! 目前状态是:"+ currentOrder.getAcceptStatus());
        record.setGmtModified(new Date());
        record.setAcceptStatus(ConstantAll.ACCEPT_ORDER_STATUS_SEND_OK);
        this.updateByPrimaryKeySelective(record);
        return record;
    }

    public DrugAcceptOrder createAcceptOrderToSending(DrugAcceptOrder record){
        Assert.isTrue(record.getId() != null , "请传递参数送药接受订单 id");
        DrugAcceptOrder currentOrder = this.selectByPrimaryKey(record.getId());
        Assert.isTrue(StringUtils.equalsIgnoreCase(currentOrder.getAcceptStatus(),ConstantAll.ACCEPT_ORDER_STATUS_READY),"只有[待送]的订单方可操作! 目前状态是:"+ currentOrder.getAcceptStatus());
        record.setGmtModified(new Date());
        record.setAcceptStatus(ConstantAll.ACCEPT_ORDER_STATUS_SENDING);
        this.updateByPrimaryKeySelective(record);
        return record;
    }

    public DrugAcceptOrder createAcceptOrder(DrugAcceptOrder record){
        Assert.isTrue(record.getId() != null , "请传递参数送药接受订单 id");
        DrugAcceptOrder currentOrder = this.selectByPrimaryKey(record.getId());
        Assert.isTrue(StringUtils.equalsIgnoreCase(currentOrder.getAcceptStatus(),ConstantAll.ACCEPT_ORDER_STATUS_PAYMENT),"只有[未接收]的订单方可操作! 目前状态是:"+ currentOrder.getAcceptStatus());
        record.setGmtModified(new Date());
        record.setAcceptStatus(ConstantAll.ACCEPT_ORDER_STATUS_READY);
        this.updateByPrimaryKeySelective(record);
        return record;
    }

    // 根据条件查询送药的列表
    public List<DrugAcceptOrderPo> listDrugAcceptOrderPo(DrugSendOrderRequest params){
        return daoDrugAcceptOrderMapper.listDrugAcceptOrderPo(params);
    }
    // 根据条件查询送药的列表 总数
    public int listDrugAcceptOrderPoCount(DrugSendOrderRequest params){
        return daoDrugAcceptOrderMapper.listDrugAcceptOrderPoCount(params);
    }

    public DrugAcceptOrderPo getDrugAcceptOrderPoById(DrugSendOrderRequest params){
        return daoDrugAcceptOrderMapper.getDrugAcceptOrderPoById(params);
    }
    // 根据条件查询列表
    public List<DrugAcceptOrder> listDrugAcceptOrder(DrugSendOrderRequest params){
        return daoDrugAcceptOrderMapper.listDrugAcceptOrder(params);
    }
    // 根据条件查询列表 总数
    public int listDrugAcceptOrderCount(DrugSendOrderRequest params){
        return daoDrugAcceptOrderMapper.listDrugAcceptOrderCount(params);
    }
    //可能批量更新
    public int updateBatchByCondition(DrugAcceptOrder recordParams){
        return daoDrugAcceptOrderMapper.updateBatchByCondition(recordParams);
    }

    public int deleteByPrimaryKey(Long id){
        return daoDrugAcceptOrderMapper.deleteByPrimaryKey(id);
    }

    public int insertSelective(DrugAcceptOrder record){
        return daoDrugAcceptOrderMapper.insertSelective(record);
    }

    public DrugAcceptOrder selectByPrimaryKey(Long id){
        return daoDrugAcceptOrderMapper.selectByPrimaryKey(id);
    }

    public int updateByPrimaryKeySelective(DrugAcceptOrder record){
        return daoDrugAcceptOrderMapper.updateByPrimaryKeySelective(record);
    }
}
