package com.yier.platform.web;

import com.github.yingzhuo.carnival.restful.security.RequiresAuthentication;
import com.google.common.collect.Lists;
import com.yier.platform.annotation.ApiCheck;
import com.yier.platform.common.jsonResponse.CommonResponse;
import com.yier.platform.common.jsonResponse.ListResponse;
import com.yier.platform.common.model.Areas;
import com.yier.platform.common.model.Cities;
import com.yier.platform.common.model.Provinces;
import com.yier.platform.common.requestParam.BaseRequest;
import com.yier.platform.service.CommonService;
import com.yier.platform.service.DistrictService;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

@ApiModel(value = "地址区域管理请求接口")
@RestController
@RequestMapping("/districtManagement")
@Slf4j
public class DistrictManagementController {

    @Autowired
    private DistrictService districtService;
    @Autowired
    private CommonService serviceCommonService;

    @ApiOperation(value = "通过查询获取省份信息列表")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/getProvincesList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<Provinces> getProvincesList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) BaseRequest params) {
        if (params == null) {
            params = new BaseRequest();
        }

        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<Provinces> res = new ListResponse<Provinces>();
        List<Provinces> list = this.serviceCommonService.listProvinces(params);
        Provinces country = new Provinces();
        country.setId(0);
        country.setProvinceId("");
        country.setProvince("热门地区");
        list.add(0, country);
        int count = this.serviceCommonService.listProvincesCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过查询获取省份信息列表(不包含热门城市)")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/getProvincesNoHotList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<Provinces> getProvincesNoHotList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) BaseRequest params) {
        if (params == null) {
            params = new BaseRequest();
        }
        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<Provinces> res = new ListResponse<Provinces>();
        List<Provinces> list = this.serviceCommonService.listProvinces(params);
        int count = this.serviceCommonService.listProvincesCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过查询获取地区信息列表, 例如：{\"searchKey\":130100}")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/getAreasList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<Areas> getAreasList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) BaseRequest params) {
        if (params == null) {
            params = new BaseRequest();
        }
        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<Areas> res = new ListResponse<Areas>();
        List<Areas> list = this.serviceCommonService.listAreas(params);
        int count = this.serviceCommonService.listAreasCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过查询获取城市信息列表, 例如：{\"searchKey\":130000}")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/getCitiesNoEmptyList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<Cities> getCitiesNoEmptyList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) BaseRequest params) {
        if (params == null) {
            params = new BaseRequest();
        }
        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<Cities> res = new ListResponse<Cities>();
        List<Cities> list = this.serviceCommonService.listCities(params);
        int count = this.serviceCommonService.listCitiesCount(params);
        res.setData(list);
        res.setTotal(count);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "通过查询获取城市信息列表，例如：{\"searchKey\":130000}")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/getCitiesList.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ListResponse<Cities> getCitiesList(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) BaseRequest params) {
        if (params == null) {
            params = new BaseRequest();
        }
        params.doWithSortOrStart();
        log.info("目前分页条件如下：" + params.toJsonString());
        ListResponse<Cities> res = new ListResponse<Cities>();
        if (StringUtils.isBlank(params.getSearchKey())) {
            List<Cities> list = Lists.newArrayList();
            Cities cities = new Cities();
            cities.setStatus("0");
            cities.setCity("北京市");
            cities.setCityId("");
            cities.setId(0);
            cities.setProvinceId("110000");
            cities.setGrade(1);
            list.add(cities);
            cities = new Cities();
            cities.setCity("天津市");
            cities.setCityId("");
            cities.setId(0);
            cities.setProvinceId("120000");
            cities.setGrade(1);
            list.add(cities);
            cities = new Cities();
            cities.setCity("上海市");
            cities.setCityId("");
            cities.setId(0);
            cities.setProvinceId("310000");
            cities.setGrade(1);
            list.add(cities);
            cities = new Cities();
            cities.setCity("重庆市");
            cities.setCityId("");
            cities.setId(0);
            cities.setProvinceId("500000");
            cities.setGrade(1);
            list.add(cities);
            cities = new Cities();
            cities.setCity("广州市");
            cities.setCityId("440100");
            cities.setId(0);
            cities.setProvinceId("440100");
            cities.setGrade(2);
            list.add(cities);
            cities = new Cities();
            cities.setCity("长沙市");
            cities.setCityId("430100");
            cities.setId(0);
            cities.setProvinceId("430000");
            cities.setGrade(2);
            list.add(cities);
            cities = new Cities();
            cities.setCity("深圳市");
            cities.setCityId("440300");
            cities.setId(0);
            cities.setProvinceId("440000");
            cities.setGrade(2);
            list.add(cities);
            cities = new Cities();
            cities.setCity("全国");
            cities.setCityId("");
            cities.setId(0);
            cities.setProvinceId("");
            cities.setGrade(1);
            list.add(cities);
            res.setData(list);
            res.setTotal(list.size());
        } else {
            List<Cities> list = this.serviceCommonService.listCities(params);
            Cities cities = new Cities();
            cities.setCity("不限");
            cities.setCityId("");
            cities.setId(0);
            cities.setStatus("0");
            cities.setProvinceId(params.getSearchKey());
            list.add(0, cities);
            int count = this.serviceCommonService.listCitiesCount(params);
            res.setData(list);
            res.setTotal(count);
        }
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "新增省份信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/insertProvince.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Provinces> insertProvince(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Provinces info) {
        log.info("新增省份信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Provinces> res = new CommonResponse<Provinces>();
        Provinces provinces = this.districtService.insertProvince(info);
        res.setData(provinces);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "更新省份信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/updateProvince.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Provinces> updateProvince(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Provinces info) {
        log.info("更新省份信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Provinces> res = new CommonResponse<Provinces>();
        Provinces provinces = this.districtService.updateProvince(info);
        res.setData(provinces);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "新增城市信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/insertCity.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Cities> insertCity(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Cities info) {
        log.info("新增城市信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Cities> res = new CommonResponse<Cities>();
        Cities cities = this.districtService.insertCity(info);
        res.setData(cities);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "更新城市信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/updateCity.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Cities> updateCity(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Cities info) {
        log.info("更新城市信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Cities> res = new CommonResponse<Cities>();
        Cities cities = districtService.updateCity(info);
        res.setData(cities);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "新增区县信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/insertArea.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Areas> insertAreas(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Areas info) {
        log.info("新增区县信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Areas> res = new CommonResponse<Areas>();
        Areas areas = this.districtService.insertArea(info);
        res.setData(areas);
        log.debug(res.toJsonString());
        return res;
    }

    @ApiOperation(value = "更新区县信息")
    @ApiCheck(check = false)
    @RequiresAuthentication
    @RequestMapping(value = "/updateArea.json", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public CommonResponse<Areas> updateArea(HttpServletRequest request, HttpServletResponse response, @ApiParam(value = "通用请求接口类") @RequestBody(required = false) Areas info) {
        log.info("更新区县信息, 请求参数：{}" + info.toJsonString());
        CommonResponse<Areas> res = new CommonResponse<Areas>();
        Areas areas = districtService.updateArea(info);
        res.setData(areas);
        log.debug(res.toJsonString());
        return res;
    }
}
