<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yier.platform.dao.UserRoleMapper">
    <resultMap id="BaseResultMap" type="com.yier.platform.common.model.UserRole">
        <constructor>
            <idArg column="user_id" javaType="java.lang.Long" jdbcType="BIGINT"/>
            <idArg column="role_id" javaType="java.lang.Long" jdbcType="BIGINT"/>
            <arg column="status" javaType="java.lang.String" jdbcType="CHAR"/>
            <arg column="gmt_create" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="gmt_modified" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="remarks" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
    user_id, role_id, status, gmt_create, gmt_modified, remarks
  </sql>


    <!-- 定义用户角色关联信息 数据库字段与实体对象的映射关系  -->
    <resultMap type="com.yier.platform.common.model.UserRolePo" id="UserRolePoMap">
        <id column="userId" property="userId"/>
        <id column="roleId" property="roleId"/>
        <result column="status" property="status"/>
        <result column="gmtCreate" property="gmtCreate"/>
        <result column="gmtModified" property="gmtModified"/>
        <result column="remarks" property="remarks"/>
        <!-- 一对一的关系 -->
        <!-- property: 指的是属性的值, javaType：指的是元素的类型 -->
        <association property="user" column="userId" javaType="com.yier.platform.common.model.User"
                     select="getUserById"/>
        <association property="role" column="roleId" javaType="com.yier.platform.common.model.Role"
                     select="getRoleById"/>
    </resultMap>
    <!-- 根据条件Id查询用户及角色信息 -->
    <select id="getUserById" parameterType="java.lang.Long" resultType="com.yier.platform.common.model.User">
    SELECT t.id, t.type, t.true_name trueName, t.user_name userName, t.id_card_no idCardNo, t.avatar_url avatarUrl,  t.birthday,
    t.wxid, t.email, t.phone_number phoneNumber, t.sex, t.field, t.profile, t.check_url checkUrl, t.imtoken, t.chat, t.status,
    t.gmt_create gmtCreate, t.gmt_modified gmtModified, t.remarks
    from t_user t
    where t.id = #{id,jdbcType=BIGINT}
  </select>
    <select id="getRoleById" parameterType="java.lang.Long" resultType="com.yier.platform.common.model.Role">
    SELECT t.id, t.office_id officeId, t.name, t.enname, t.role_type roleType, t.data_scope dataScope, t.is_sys isSys, t.create_by createBy, t.status,
    t.gmt_create gmtCreate, t.gmt_modified gmtModified, t.remarks
    from t_role t
    where t.id = #{id,jdbcType=BIGINT}
  </select>

    <select id="getUserRoleByUserId" parameterType="java.lang.Long" resultMap="UserRolePoMap">
    select t.user_id userId, t.role_id roleId, t.status, t.gmt_create gmtCreate, t.gmt_modified gmtModified, t.remarks from t_user_role t
    where t.user_id = #{userId,jdbcType=BIGINT}
  </select>

    <!-- 根据条件查询用户角色关联信息列表 -->
    <select id="listUserRolePo" parameterType="com.yier.platform.common.requestParam.UserRoleRequest"
            resultMap="UserRolePoMap">
        select t.user_id userId, t.role_id roleId, t.status, t.gmt_create gmtCreate, t.gmt_modified gmtModified,
        t.remarks from t_user_role t
        <where>
            <if test="roleId != null">
                and t.role_id = #{roleId}
            </if>
            <if test="userId != null">
                and t.user_id = #{userId}
            </if>
            <if test="status != null">
                and t.status = #{status}
            </if>
        </where>
        <choose>
            <when test="sort!=null and order!=null">
                order by ${sort} ${order}
            </when>
            <otherwise>
                order by t.user_id ,t.role_id
            </otherwise>
        </choose>
        <choose>
            <when test="start!=null and size!=null">
                limit #{start},#{size}
            </when>
            <when test="start==null and size!=null">
                limit #{size}
            </when>
        </choose>
    </select>

    <!-- 根据条件查询用户角色关联信息列表 总和 -->
    <select id="listUserRolePoCount" parameterType="com.yier.platform.common.requestParam.UserRoleRequest"
            resultType="Integer">
        select count(t.role_id) from t_user_role t
        <where>
            <if test="roleId != null">
                and t.role_id = #{roleId}
            </if>
            <if test="userId != null">
                and t.user_id = #{userId}
            </if>
            <if test="status != null">
                and t.status = #{status}
            </if>
        </where>
    </select>

    <!--根据用户id删除用户角色信息-->
    <delete id="deleteUserRoleByUserId" parameterType="java.lang.Long">
    delete from t_user_role
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>










    <select id="selectByPrimaryKey" parameterType="com.yier.platform.common.requestParam.UserRoleRequest"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_user_role
        where user_id = #{userId,jdbcType=BIGINT}
        and role_id = #{roleId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.yier.platform.common.requestParam.UserRoleRequest">
    delete from t_user_role
    where user_id = #{userId,jdbcType=BIGINT}
      and role_id = #{roleId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.yier.platform.common.model.UserRole">
    insert into t_user_role (user_id, role_id, status, 
      gmt_create, gmt_modified, remarks
      )
    values (#{userId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT}, #{status,jdbcType=CHAR}, 
      #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, #{remarks,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.yier.platform.common.model.UserRole">
        insert into t_user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
            <if test="remarks != null">
                remarks,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=CHAR},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="remarks != null">
                #{remarks,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yier.platform.common.model.UserRole">
        update t_user_role
        <set>
            <if test="status != null">
                status = #{status,jdbcType=CHAR},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="remarks != null">
                remarks = #{remarks,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=BIGINT}
        and role_id = #{roleId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yier.platform.common.model.UserRole">
    update t_user_role
    set status = #{status,jdbcType=CHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      remarks = #{remarks,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=BIGINT}
      and role_id = #{roleId,jdbcType=BIGINT}
  </update>
</mapper>