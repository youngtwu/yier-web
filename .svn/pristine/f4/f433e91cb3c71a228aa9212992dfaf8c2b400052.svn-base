package com.yier.platform.service.medical;

import com.fasterxml.jackson.core.type.TypeReference;
import com.google.common.collect.Lists;
import com.yier.platform.common.costant.ConstantAll;
import com.yier.platform.common.model.*;
import com.yier.platform.common.requestParam.DoctorRequest;
import com.yier.platform.common.requestParam.MedicalDateRequest;
import com.yier.platform.common.requestParam.MedicalOrderRequest;
import com.yier.platform.common.util.JsonUtils;
import com.yier.platform.common.util.OrderIdUtils;
import com.yier.platform.common.util.RandomUtils;
import com.yier.platform.common.util.Utils;
import com.yier.platform.dao.MedicalOrderMapper;
import com.yier.platform.service.*;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * 上门问诊订单 service
 */
@Service
public class MedicalOrderService {
    private final Logger logger = LoggerFactory.getLogger(MedicalOrderService.class);
    @Autowired
    private MedicalOrderMapper daoMedicalOrderMapper;
    @Autowired
    private  MedicalDateService medicalDateService;
    @Autowired
    private OrderDrugsService orderDrugsService;
    @Autowired
    private PatientService patientService;
    @Autowired
    private DoctorService doctorService;
    @Autowired
    private HospitalService hospitalService;
    @Autowired
    private Uploader uploader;
    @Autowired
    private RedisService redisService;

    @ApiOperation(value = "创建患者取消")
    @Transactional
    public MedicalOrder createPatientCancel(MedicalOrder record){
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_PATIENT_CANCEL);//预约确认
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_PATIENT_CANCEL);//预约确认
        medicalOrder.setRemarks("患者取消");
        medicalOrder.setGmtModified(new Date());
        this.updateByPrimaryKeySelective(medicalOrder);
        return record;
    }



    @ApiOperation(value = "创建医生取消")
    @Transactional
    public MedicalOrder createDoctorCancel(MedicalOrder record){
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_DOCTOR_CANCEL);//预约确认
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_DOCTOR_CANCEL);//预约确认
        medicalOrder.setRemind(record.getRemind());
        medicalOrder.setRemarks("创建医生取消");
        medicalOrder.setGmtModified(new Date());
        this.updateByPrimaryKeySelective(medicalOrder);
        return record;
    }


    @ApiOperation(value = "预约订单 医生 患者未在家")
    @Transactional
    public MedicalOrder createPatientDisappearConfirm(MedicalOrder record){
        Assert.isTrue(record.getId()!=null,"请给出您要处理的出诊订单ID");
        Assert.isTrue(record.getDoctorLat()!=null,"请提供目前医生的经度坐标!");
        Assert.isTrue(record.getDoctorLng()!=null,"请提供目前医生的纬度坐标!");
        String keyStartServiceRcordStartTime = ConstantAll.REDIS_DOCTOR_APPOINT_START_SERVICE_WAIT_TIME+record.getId();
        MedicalOrder result = JsonUtils.fromJson(redisService.getValueRedisByKey(keyStartServiceRcordStartTime), new TypeReference<MedicalOrder>() {
        });
        Assert.isTrue(result != null,"已经操作过,请勿再重复点击患者未在家操作!");

        Date currentDate = new Date();
        long differMicroSecond = result.getGmtModified().getTime() - currentDate.getTime();//result.getGmtModified().getTime() 缓存中的数据对象,跟DB中的模型修改没有直接关系,DB就是后台悄悄更改也不影响缓存中的数据
        long remin = ConstantAll.VALUE_MEDICAL_ORDER_START_SERVICE_WAIT_TIME + differMicroSecond /ConstantAll.VALUE_MICROSECOND_1000;
        String remark = "";
        if(remin>0){
            remark = "患者未在家 医生没有等够"+ConstantAll.VALUE_MEDICAL_ORDER_START_SERVICE_WAIT_TIME+"秒,提前离开,责任在医生";
        }
        else{
            remark = "患者未在家 医生苦苦等够"+ConstantAll.VALUE_MEDICAL_ORDER_START_SERVICE_WAIT_TIME+"秒,目前离开,责任在患者";
        }
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setDoctorLat(record.getDoctorLat());
        medicalOrder.setDoctorLng(record.getDoctorLng());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_APPPOINT_PAST_DUE);//  预约过期
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_APPPOINT_PAST_DUE);// 预约过期
        medicalOrder.setRemarks(remark);
        medicalOrder.setGmtModified(currentDate);
        this.updateByPrimaryKeySelective(medicalOrder);
        redisService.deleteRedisByKey(keyStartServiceRcordStartTime);//不用考虑 医生开始服务 记录时间问题
        return record;
    }

    @ApiOperation(value = "预约订单 患者 确认上门")
    @Transactional
    public MedicalOrder createStartServiceConfirm(MedicalOrder record){
        Assert.isTrue(record.getId()!=null,"请给出您要处理的出诊订单ID");
        String keyStartServiceRcordStartTime = ConstantAll.REDIS_DOCTOR_APPOINT_START_SERVICE_WAIT_TIME+record.getId();
        Set<String> stringSet = redisService.getRedisKeysByPattern(keyStartServiceRcordStartTime);
        Assert.isTrue(stringSet.size()> 0,"已经操作过,请勿再重复点击确认上门!");
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_START_SERVICE_CONFIRM);//患者确认开始服务
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_START_SERVICE_CONFIRM);//患者确认开始服务
        medicalOrder.setRemarks("患者 确认上门");
        medicalOrder.setGmtModified(new Date());
        this.updateByPrimaryKeySelective(medicalOrder);
        redisService.deleteRedisByKey(keyStartServiceRcordStartTime);//不用考虑 医生开始服务 记录时间问题
        return record;
    }


    @ApiOperation(value = "预约订单 医生开始服务")
    @Transactional
    public MedicalOrder createStartService(MedicalOrder record){
        Assert.isTrue(record.getId()!=null,"请给出您要处理的出诊订单ID");
        Assert.isTrue(record.getDoctorLat()!=null,"请提供目前医生的经度坐标!");
        Assert.isTrue(record.getDoctorLng()!=null,"请提供目前医生的纬度坐标!");
        String keyStartServiceRcordStartTime = ConstantAll.REDIS_DOCTOR_APPOINT_START_SERVICE_WAIT_TIME+record.getId();
        Set<String> stringSet = redisService.getRedisKeysByPattern(keyStartServiceRcordStartTime);
        Assert.isTrue(stringSet.size()==0,"已经操作过,请勿再重复点击开始服务!");
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setDoctorLat(record.getDoctorLat());
        medicalOrder.setDoctorLng(record.getDoctorLng());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_START_SERVICE);//预约确认
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_START_SERVICE);//预约确认
        medicalOrder.setRemarks("医生开始服务");
        medicalOrder.setGmtModified(new Date());
        this.updateByPrimaryKeySelective(medicalOrder);
        redisService.setJsonObjectBy(keyStartServiceRcordStartTime,medicalOrder,1L,TimeUnit.DAYS);//考虑一整天,redis 都是副本,如果取出修改,并不直接影响DB库的值


        return record;
    }



    @ApiOperation(value = "预约订单确定")
    @Transactional
    public MedicalOrder createAppointConfirm(MedicalOrder record){
        MedicalOrder medicalOrder = new MedicalOrder();
        medicalOrder.setId(record.getId());
        medicalOrder.setStatus(ConstantAll.ORDER_STATUS_APPPOINT_CONFIIRM);//预约确认
        medicalOrder.setStatusDetail(ConstantAll.ORDER_STATUS_APPPOINT_CONFIIRM);//预约确认
        medicalOrder.setRemarks("预约确认");
        medicalOrder.setGmtModified(new Date());
        this.updateByPrimaryKeySelective(medicalOrder);
        return record;
    }

    @ApiOperation(value = "创建预约订单")
    @Transactional
    public MedicalOrder createAppointment(MedicalOrder record, MultipartFile[] file){
        Set<String> stringSet = redisService.getRedisKeysByPattern(ConstantAll.REDIS_DOCTOR_APPOINT_LOCK_ORDER+record.getPatientId()+ConstantAll.REDIS_DOCTOR_APPOINT_LOCK_ORDER_PART_ORDER+"*");
        stringSet.forEach(t->{
            logger.info("缓存情况如此 key:{}  value:{}",t,redisService.getValueRedisByKey(t,false));
        });
        Assert.isTrue(stringSet.size()<1,"老兄,您需要付好款或取消订单才能再预约!");
        if(file!=null && file.length >0){
            StringBuilder stringBuilder = new StringBuilder();
            for(int i=0;i<file.length;i++){
                String url = uploader.upload(file[i]);
                stringBuilder.append(url).append(",");
            }
            record.setMedicalPictures(stringBuilder.toString());
            record.setMedicalPicturesList(null);//不考虑 图片上传
        }

        if(record.getMedicalPicturesList()!=null && record.getMedicalPicturesList().size()>0){
            StringBuilder sb = new StringBuilder();
            record.getMedicalPicturesList().forEach(t->{
                sb.append(t).append(",");
            });
            record.setMedicalPictures(sb.toString());
        }
        Patient patient = patientService.selectByPrimaryKey(record.getPatientId());
        Assert.isTrue(patient!=null,"患者信息无效");
        String orderNo = OrderIdUtils.genOrderIdWithDateUserId(StringUtils.leftPad(patient.getId().toString(),5,"M")); //"P"+ RandomUtils.randomNumeric(4) + UUID.randomUUID().toString().replace("-","").toUpperCase();
        record.setPatientIdCardNo(patient.getIdCardNo());
        record.setPatientName(patient.getTrueName());
//        record.setPatientAddress(record.getPatientAddress());
        record.setPatientContact(patient.getPhoneNumber());
        record.setPatientSex(patient.getSex());
        String patientYearOld = "";
        if(patient.getBirthday()!=null){
            Calendar cal = Calendar.getInstance();
            int iCurrYear = cal.get(Calendar.YEAR);
            cal.setTime(patient.getBirthday());
            int userYear = cal.get(Calendar.YEAR);
            int yearInfo = iCurrYear - userYear;
            patientYearOld = yearInfo==0?"":yearInfo+"岁";
        }
        record.setPatientYearOld(patientYearOld);
        DoctorPo doctor = doctorService.getDoctorHospitalPoById(record.getDoctorId());
        Assert.isTrue(doctor!=null,"医生信息无效");
        Assert.isTrue(doctor.getHospitalDepartmentPo()!=null, " 医生对应的科室无效,请调整!");
        record.setDoctorName(doctor.getTrueName());
        record.setHospitalId(doctor.getHospitalId());
        record.setHospitalName(doctor.getHospitalDepartmentPo().getHospitalName());
        record.setHospitalAddress(doctor.getHospitalDepartmentPo().getHospitalAddress());
        record.setHospitalContact("医院电话号码");
        record.setCatalogId(doctor.getCatalogId());
        record.setDepartmentId(doctor.getDepartmentId());
        record.setDepartmentName(doctor.getHospitalDepartmentPo().getCatalogName() + " " + doctor.getHospitalDepartmentPo().getName());
        record.setDoctorTitle(doctor.getDoctorTitle());
        record.setStatus(ConstantAll.ORDER_STATUS_APPPOINT);
        record.setOrderNo(orderNo);
        MedicalDateRequest medicalDateRequest = new MedicalDateRequest();
        medicalDateRequest.setTypeId(ConstantAll.TYPE_ID_DOCTOR+"");
        medicalDateRequest.setUserId(record.getDoctorId().toString());
        medicalDateRequest.setPlanTime(record.getPlanTime());
        medicalDateRequest.setWorkTime(record.getWorkTime());
        List<MedicalDatePo> medicalDatePoList = medicalDateService.listMedicalDatePo(medicalDateRequest);
        Assert.isTrue(medicalDatePoList.size()>0, Utils.formatDate(record.getPlanTime(),"yyyy-MM-dd")+" 医生没有就诊安排,无法预约!");
        Assert.isTrue(medicalDatePoList.get(0).getAppointmentNum() >= 1,"医生该日期的上门就诊已经饱和,无法预约!");
        record.setMedicalDateId(medicalDatePoList.get(0).getId());
        Date currentDate = new Date();
        record.setGmtCreate(currentDate);
        record.setGmtModified(currentDate);
        record.setRemarks("用户下单准备付款");
        this.daoMedicalOrderMapper.insertSelective(record);
        medicalDateService.lockForCondition(record);
        return record;
    }

    //患者端 根据条件查询显示医生信息及详细预约时间信息列表
    public List<MedicalOrderPo> listMedicalOrderPoWithDoctorappointmentInfo(MedicalOrderRequest params){
        logger.info("目前查询条件是:{}",params);
        List<MedicalOrderPo> medicalOrderPoList = daoMedicalOrderMapper.listMedicalOrderPo(params);
        List<Long> doctorIdList = Lists.newArrayList();
        medicalOrderPoList.forEach(t->{
            t.getPatientPo().thinkField();
            StringBuilder sb = new StringBuilder();
            sb.append(Utils.formatDate(t.getPlanTime(),"yyyy-MM-dd"))
                    .append(" ").append(Utils.getWeekInfo(t.getPlanTime())).append(" ").append(t.getWorkTime());
            t.setAppointmentInfo(sb.toString());
            t.setMedicalPicturesList(Arrays.asList(t.getMedicalPictures().split(",")));
            doctorIdList.add(t.getDoctorId());
        });
        DoctorRequest doctorRequest = new DoctorRequest();
        doctorRequest.setDoctorIdList(doctorIdList);
        List<DoctorPo>  doctorPoList = this.doctorService.listDoctorHospitalPo(doctorRequest);
        medicalOrderPoList.forEach(t->{
            t.setDoctorPo(doctorPoList.stream().filter(doctor->doctor.getId().longValue()==t.getDoctorId().longValue()).findFirst().orElse(null));
        });
        return medicalOrderPoList;
    }
    // 医生端 根据条件查询显示患者信息及详细预约时间信息列表
    public List<MedicalOrderPo> listMedicalOrderPoWithPatienOldappointmentInfo(MedicalOrderRequest params){
        logger.info("目前查询条件是:{}",params);
        List<MedicalOrderPo> medicalOrderPoList = daoMedicalOrderMapper.listMedicalOrderPo(params);
        medicalOrderPoList.forEach(t->{
            t.getPatientPo().thinkField();
            StringBuilder sb = new StringBuilder();
            sb.append(Utils.formatDate(t.getPlanTime(),"yyyy-MM-dd"))
            .append(" ").append(Utils.getWeekInfo(t.getPlanTime())).append(" ").append(t.getWorkTime());
            t.setAppointmentInfo(sb.toString());
            t.setMedicalPicturesList(Arrays.asList(t.getMedicalPictures().split(",")));
        });
        return medicalOrderPoList;
    }
    // 根据条件查询列表
    public List<MedicalOrderPo> listMedicalOrderPo(MedicalOrderRequest params){
        return daoMedicalOrderMapper.listMedicalOrderPo(params);
    }
    // 根据条件查询列表 总数
    public int listMedicalOrderPoCount(MedicalOrderRequest params){
        return daoMedicalOrderMapper.listMedicalOrderPoCount(params);
    }
    //根据ID Key 获取一个订单
    public MedicalOrder selectMedicalOrderByIdKey(MedicalOrderRequest params){
        return daoMedicalOrderMapper.selectMedicalOrderByIdKey(params);
    }

    public List<MedicalOrder> listMedicalOrder(MedicalOrderRequest params){
        return daoMedicalOrderMapper.listMedicalOrder(params);
    }

    public int listMedicalOrderCount(MedicalOrderRequest params){
        return daoMedicalOrderMapper.listMedicalOrderCount(params);
    }

    public int insertSelective(MedicalOrder record){
        return daoMedicalOrderMapper.insertSelective(record);
    }

    public MedicalOrder selectByPrimaryKey(Long id){
        return daoMedicalOrderMapper.selectByPrimaryKey(id);
    }

    public int updateByPrimaryKeySelective(MedicalOrder record){
        return daoMedicalOrderMapper.updateByPrimaryKeySelective(record);
    }

}
