package com.yier.platform.service.feign;

import com.fasterxml.jackson.core.type.TypeReference;
import com.github.yingzhuo.carnival.jsr310.group.Groups;
import com.google.common.collect.Lists;
import com.yier.platform.common.model.OrderDrugs;
import com.yier.platform.common.requestParam.OrderDrugsRequest;
import com.yier.platform.common.util.JsonUtils;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import java.lang.reflect.Type;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 远程对接服务 service
 */
@ApiModel(value = "远程对接服务 service")
@Service
public class RemoteService {
    private static final Logger logger = LoggerFactory.getLogger(RemoteService.class);
    @Autowired
    private RemotePharmacyService remotePharmacyService;//处方药品方面对接

    @ApiOperation(value = "查询药品列表")
    public List<OrderDrugs> getListDrugs(OrderDrugsRequest parms){
        Assert.isTrue(StringUtils.isNotBlank(parms.getDrugName()),"参数无效,drugName不能是空!");
        Assert.isTrue(StringUtils.isNotBlank(parms.getPharmacyId()),"参数无效,pharmacyId不能是空!");
        Map<String, Object> result = remotePharmacyService.listDrugs(parms.getPharmacyId(),parms.getDrugName(), parms.getStart(), parms.getSize());
        List<OrderDrugs> orderDrugsList = Lists.newArrayList();
        logger.info("大结果result -->{} code:{}",result,result.get("code"));
        int code = (int)result.get("code");
        if(code == 0){
            List<Map<String,Object>> objectMapList = (List<Map<String,Object>>)result.get("drug_list");
            logger.info("drug_list 结果 objectMapList:{}  长度:{}",objectMapList,objectMapList.size());
            for (int i = 0; i < objectMapList.size(); i++) {
                Map<String,Object> drugMap = objectMapList.get(i);
                OrderDrugs orderDrugs = new OrderDrugs();
                for(Map.Entry<String, Object> entry : drugMap.entrySet()){
                    switch (entry.getKey()){
                        case "drugCode":
                            orderDrugs.setDrugCode(entry.getValue().toString());
                            break;
                        case "drugStock":
                            int drugStockInt = (int)entry.getValue();
                            Assert.isTrue(drugStockInt>0,"药品库存不足!");
                            orderDrugs.setDrugStock(drugStockInt);
                            break;
                        case "drugPrice":
                            int drugPriceInt = (int)entry.getValue();
                            orderDrugs.setCostPrice(drugPriceInt);
                            break;
                        case "drugName":
                            orderDrugs.setDrugName(entry.getValue().toString());
                            break;
                        case "cCompanyName":
                            orderDrugs.setProductionCompanyName(entry.getValue().toString());
                            break;
                        case "drugForm":
                            orderDrugs.setFormCode(entry.getValue().toString());
                            break;
                        case "drugSpec":
                            orderDrugs.setDrugSpec(entry.getValue().toString());
                            break;
                        case "eCompanyName":
                            if(StringUtils.isBlank(orderDrugs.getProductionCompanyName())){
                                orderDrugs.setProductionCompanyName(entry.getValue().toString());
                            }
                            break;
                    }
                    logger.info("药品明细 orderDrugs -->{}",orderDrugs);
                }
                orderDrugsList.add(orderDrugs);
            }
/*
            objectMapList.forEach(drugMap->{
//                Map<String,Object> drugMap = (Map<String,Object>)drugObject;
                OrderDrugs orderDrugs = new OrderDrugs();
                for(Map.Entry<String, Object> entry : drugMap.entrySet()){
                    switch (entry.getKey()){
                        case "drugCode":
                            orderDrugs.setDrugCode(entry.getValue().toString());
                            break;
                        case "drugStock":
                            int drugStockInt = (int)entry.getValue();
                            Assert.isTrue(drugStockInt>0,"药品库存不足!");
                            orderDrugs.setDrugStock(drugStockInt);
                            break;
                        case "drugPrice":
                            int drugPriceInt = (int)entry.getValue();
                            orderDrugs.setCostPrice(drugPriceInt);
                            break;
                        case "drugName":
                            orderDrugs.setDrugName(entry.getValue().toString());
                            break;
                        case "cCompanyName":
                            orderDrugs.setProductionCompanyName(entry.getValue().toString());
                            break;
                        case "drugForm":
                            orderDrugs.setFormCode(entry.getValue().toString());
                            break;
                        case "drugSpec":
                            orderDrugs.setDrugSpec(entry.getValue().toString());
                            break;
                        case "eCompanyName":
                            if(StringUtils.isBlank(orderDrugs.getProductionCompanyName())){
                                orderDrugs.setProductionCompanyName(entry.getValue().toString());
                            }
                            break;
                    }
                    logger.info("药品明细 orderDrugs -->{}",orderDrugs);
                    orderDrugsList.add(orderDrugs);
                }

            });*/
        }
/*        if(code == 0){
            Object objectList = result.get("drug_list");
            logger.info("列表drug_list -->{}",objectList);
            List<Object> objectMapList = (List<Object>)objectList;
            logger.info("列表objectMapList -->{}",objectMapList);
            objectMapList.forEach(t->{
                Object drugObject = t;
                logger.info("药品drugObject -->{}",drugObject);
                Map<String,String> drugMap = (Map<String,String>)drugObject;
                logger.info("映射的Map信息 药品drugMap -->{}",drugMap);
//                drugMap.forEach(Map.Entry<String,String> );
                for(Map.Entry<String, String> entry : drugMap.entrySet()){
                    logger.info("药品明细 entry -->{}",entry);
                }

            });
        }*/
//        Map<String,List<Map<String,String>>> resultObject  = JsonUtils.fromJson(result, new TypeReference<Groups.T>() {
//        });
/*        Map<String,List<Map<String,String>>> resultMapObejct = JsonUtils.fromJson(JsonUtils.toJsonString(result), new TypeReference< Map<String,List<Map<String,String>>>>() {
        });
        logger.info("结果信息 resultMapObejct:{}",resultMapObejct);
        if(resultMapObejct.get("code").equals("0")){
            List<Map<String,String>> drugList = (List<Map<String,String>>)resultMapObejct.get("drug_list");
            logger.info("结果信息 resultMapObejct:{}",resultMapObejct);
        }*/
        return orderDrugsList;

//        this.remotePharmacyService.listDrugs("100001", "赖氨", 0, 10);
    }
}
