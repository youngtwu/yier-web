package com.yier.platform.service;

import com.google.common.collect.Lists;
import com.yier.platform.common.model.MedicalDate;
import com.yier.platform.common.model.MedicalDatePo;
import com.yier.platform.common.requestParam.MedicalDateRequest;
import com.yier.platform.common.util.Utils;
import com.yier.platform.dao.MedicalDateMapper;
import com.yier.platform.dao.MedicalOrderMapper;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * 上门问诊医生时间编排 service
 */
@Service
public class MedicalDateService {
    private final Logger logger = LoggerFactory.getLogger(MedicalDateService.class);
    @Autowired
    private MedicalDateMapper daoMedicalDate;

    @Transactional
    public int insertMedicalDates(MedicalDatePo record){
        Date nowStart = null;
        Date planTimeBeginDate = null;
        try {
            nowStart = Utils.getToday();
            logger.info("nowStart:{}",Utils.dateToString(nowStart,"yyyy.MM.dd HH:mm:ss"));
            planTimeBeginDate = DateUtils.parseDate(record.getPlanTimeBegin(),"yyyy-MM-dd");
        } catch (ParseException e) {
            Assert.isTrue(false,"无效日期:"+record.getPlanTimeBegin());
        }
        Date planTimeEndDate = null;
        try {
            planTimeEndDate = DateUtils.parseDate(record.getPlanTimeEnd(),"yyyy-MM-dd");
        } catch (ParseException e) {
            Assert.isTrue(false,"无效日期:"+record.getPlanTimeBegin());
        }
        Assert.isTrue(planTimeBeginDate.before(planTimeEndDate),record.getPlanTimeBegin()+" 应小于日期 "+record.getPlanTimeBegin());
        try {
            Assert.isTrue(Utils.daysBetween(new Date(),planTimeBeginDate)>=0,"开始日期需要在今天之后");
            Assert.isTrue(Utils.daysBetween(new Date(),planTimeEndDate)<60,"结束日期需要在目前两个月内");
        } catch (ParseException e) {
            Assert.isTrue(false,"无效日期:"+record.getPlanTimeEnd());
        }


        List<Date> planDateList = Lists.newArrayList();
        Calendar tempStart = Calendar.getInstance();
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date samllDate = null;
        Date endBigDate = null;
        try {
            samllDate = format.parse(record.getPlanTimeBegin());
            endBigDate = format.parse(record.getPlanTimeEnd());
            tempStart.setTime(samllDate);
            while(samllDate.getTime()<=endBigDate.getTime()) {
                Date currentDate = tempStart.getTime();
                int currentWeek = Utils.getWeekInt(currentDate);
                String currentDateString = format.format(currentDate);
                logger.info("currentDate:{} currentWeek:{} currentDateString:{}",Utils.formatDate(currentDate,"yyyy年MM月dd日 HH:mm:ss"),currentWeek,currentDateString);
                if(record.getWeekTimeList().stream().filter(t->StringUtils.equalsIgnoreCase(t,""+currentWeek)).count()==0
                    && record.getExceptTimeList().stream().filter(t->StringUtils.equalsIgnoreCase(t,currentDateString)).count()==0){
                    planDateList.add(currentDate);
                    logger.info("添加目前日期:{}",Utils.formatDate(currentDate,"yyyy年MM月dd日 HH:mm:ss"));
                }
                tempStart.add(Calendar.DAY_OF_YEAR, 1);
                samllDate = tempStart.getTime();
            }
        } catch (Exception e) {
            logger.error("日期格式转换错误"+e.getMessage());
        }
        Assert.isTrue(record!=null && planDateList!=null && planDateList.size()>0,"请传递有效的就诊日期!");
        MedicalDateRequest params = new MedicalDateRequest();
        params.setTypeId(record.getTypeId());
        params.setUserId(record.getUserId());
        params.setPlanTimeBegin(Utils.getQueryStrtDate(new Date(),0));
        params.setStatus("0");
        List<MedicalDate> listMedicalDate = this.listMedicalDate(params);
        List<MedicalDate> insertList = Lists.newArrayList();
        planDateList.forEach(date->{
            MedicalDate medicalDate = new MedicalDate(record);
            medicalDate.setPlanTime(date);
            Assert.isTrue(listMedicalDate.stream().filter(t->t.getPlanTime().compareTo(medicalDate.getPlanTime())==0).count()==0,Utils.formatDate(medicalDate.getPlanTime(),"yyy-MM-dd")+"就诊日期已经存在!");
            medicalDate.setWeekInfo(Utils.getWeekInfo(medicalDate.getPlanTime()));
            insertList.add(new MedicalDate(medicalDate));
        });
        insertList.forEach(t->{
            logger.info("时间:{} 目前插入:{}",Utils.formatDate(t.getPlanTime(),"yyyy.MM.dd HH:mm:ss"), t);
            this.insertSelective(t);
        });
        return insertList.size();
    }

    public List<MedicalDatePo> listMedicalDatePo(MedicalDateRequest params){
        return daoMedicalDate.listMedicalDatePo(params);
    }
    public int listMedicalDatePoCount(MedicalDateRequest params){
        return daoMedicalDate.listMedicalDatePoCount(params);
    }
    public List<MedicalDate> listMedicalDate(MedicalDateRequest params){
        return daoMedicalDate.listMedicalDate(params);
    }
    public int listMedicalDateCount(MedicalDateRequest params){
        return daoMedicalDate.listMedicalDateCount(params);
    }
    public int deleteByPrimaryKey(Long id){
        return daoMedicalDate.deleteByPrimaryKey(id);
    }

    public int insertSelective(MedicalDate record){
        return daoMedicalDate.insertSelective(record);
    }

    public MedicalDate selectByPrimaryKey(Long id){
        return daoMedicalDate.selectByPrimaryKey(id);
    }

    public int updateByPrimaryKeySelective(MedicalDate record){
        return daoMedicalDate.updateByPrimaryKeySelective(record);
    }
}
