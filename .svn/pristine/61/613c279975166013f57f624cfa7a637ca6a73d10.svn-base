package com.yier.platform.service.medical;

import com.google.common.collect.Lists;
import com.yier.platform.common.costant.ConstantAll;
import com.yier.platform.common.model.*;
import com.yier.platform.common.requestParam.DrugSendOrderRequest;
import com.yier.platform.common.requestParam.MedicalPrescriptionRequest;
import com.yier.platform.dao.DrugSendOrderMapper;
import com.yier.platform.dao.MedicalDateMapper;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import java.util.List;


@Service
public class DrugSendOrderService {
    private final Logger logger = LoggerFactory.getLogger(DrugSendOrderService.class);
    @Autowired
    private DrugSendOrderMapper daoDrugSendOrderMapper;

/*    @ApiOperation(value = "创建患者送药订单")
    @Transactional
    public DrugSendOrder drugTakeOrderCreate(DrugSendOrder record){
        Assert.isTrue(record.getPrescriptionIdList()!=null,"请传递药品列表");
        Assert.isTrue(record.getPharmacyId()!=null,"请传递pharmacyId药库Id");
        Assert.isTrue(record.getPlanTime()!=null,"请传递planTime取药日期");
        MedicalPrescriptionRequest params = new MedicalPrescriptionRequest();
        params.setPrescriptionIdList(record.getPrescriptionIdList());
        List<MedicalPrescriptionPo> medicalPrescriptionPoList =  medicalPrescriptionService.listMedicalPrescriptionPo(params);
        List<Pharmacy> listAllPharmacy  = pharmacyService.getListAllPharmacy();
        Pharmacy pharmacy = listAllPharmacy.stream().filter(t->t.getId().toString().equalsIgnoreCase(record.getPharmacyId())).findFirst().orElse(null);
        Assert.isTrue(pharmacy!=null,"您选择的药房目前并不存在!");

        //考虑某个处方在某个药库下面，库存有效，同时修正处方对应药品code的价格
        remoteService.considerPrescriptionInPharmacyStockUpdatePrice(medicalPrescriptionPoList, params.getPharmacyId());


        String orderNo = idGenerator.nextId().toString();
        record.setTakeOrderNo(orderNo);

        List<String> orderNoList = Lists.newArrayList();
        List<String> prescriptionIdList = Lists.newArrayList();
        final OrderDrugs orderDrugs =new OrderDrugs();
        orderDrugs.setCostPrice(0);
        medicalPrescriptionPoList.forEach(p->{
            p.getDrugList().forEach(d->{
                orderDrugs.setCostPrice(d.getCostPrice().intValue()+orderDrugs.getCostPrice());
            });
            orderNoList.add(p.getOrderNo());
            prescriptionIdList.add(p.getPrescriptionId());
            DrugTakePrescription drugTakePrescription = new DrugTakePrescription();
            drugTakePrescription.setPrescriptionId(p.getPrescriptionId());
            drugTakePrescription.setTakeOrderNo(orderNo);
            drugTakePrescription.setMedicalOrderId(p.getMedicalOrderId());
            drugTakePrescription.setMedicalPrescriptionId(p.getId());
            drugTakePrescription.setPharmacyId(pharmacy.getId().toString());
            drugTakePrescription.setPharmacyName(pharmacy.getName());
            drugTakePrescription.setPharmacyAddress(pharmacy.getAddress());
            drugTakePrescription.setPharmacyContact(pharmacy.getContact());
            drugTakePrescriptionService.insertSelective(drugTakePrescription);

            record.setPatientId(p.getPatientId());
            record.setPatientAddress(p.getPatientAddress());
            record.setPatientContact(p.getPatientContact());
            record.setPatientIdCardNo(p.getPatientIdCardNo());
            record.setPatientName(p.getPatientName());
            record.setPatientSex(p.getPatientSex());
            record.setPatientYearOld(p.getPatientYearOld());
        });
        record.setOrderNo(StringUtils.join(orderNoList.toArray(),","));
        record.setPrescriptionId(StringUtils.join(prescriptionIdList.toArray(),","));
        record.setPharmacyId(pharmacy.getId().toString());
        record.setPharmacyName(pharmacy.getName());
        record.setPharmacyAddress(pharmacy.getAddress());
        record.setPharmacyContact(pharmacy.getContact());
        record.setPayment(orderDrugs.getCostPrice());
        record.setRemind(""+ConstantAll.VALUE_PAYMENT_LOCK);
        record.setTakeStatus(ConstantAll.TAKE_ORDER_STATUS_APPPOINT);
        record.setRemarks("取药订单成功");
        this.insertSelective(record);
        return record;
    }*/
    // 根据条件查询送药的列表
    public List<DrugSendOrderPo> listDrugSendOrderPo(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderPo(params);
    }
    // 根据条件查询送药的列表 总数
    public int listDrugSendOrderPoCount(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderCount(params);
    }

    public DrugSendOrderPo getDrugSendOrderPoById(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.getDrugSendOrderPoById(params);
    }
    // 根据条件查询列表
    public List<DrugSendOrder> listDrugSendOrder(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrder(params);
    }
    // 根据条件查询列表 总数
    public int listDrugSendOrderCount(DrugSendOrderRequest params){
        return daoDrugSendOrderMapper.listDrugSendOrderCount(params);
    }

    public int deleteByPrimaryKey(Long id){
        return daoDrugSendOrderMapper.deleteByPrimaryKey(id);
    }

    public int insertSelective(DrugSendOrder record){
        return daoDrugSendOrderMapper.insertSelective(record);
    }

    public DrugSendOrder selectByPrimaryKey(Long id){
        return daoDrugSendOrderMapper.selectByPrimaryKey(id);
    }

    public int updateByPrimaryKeySelective(DrugSendOrder record){
        return daoDrugSendOrderMapper.updateByPrimaryKeySelective(record);
    }

}