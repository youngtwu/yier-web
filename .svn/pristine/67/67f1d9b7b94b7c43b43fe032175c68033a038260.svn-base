<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.yier</groupId>
    <artifactId>parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <!--这里要注意的是，module的顺序，因为install的时候是按照这个顺序生成jar 的，所有我们的依赖最少的子项目要放前面，保证它所依赖的jar已经存在。-->
    <!--注意依赖的传递性,（大部分情况是传递的，除非你配置了特殊的依赖scope）-->
    <modules>
        <module>common</module>
        <module>service</module>
        <module>task</module>
        <module>platform</module>
        <module>web</module>


    </modules>
    <packaging>pom</packaging>

    <name>parent</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring.boot.version>2.0.5.RELEASE</spring.boot.version>
        <!--<version>${project.version}</version>==>0.0.1-SNAPSHOT-->
        <!--<project.version1>0.0.1-SNAPSHOT</project.version1>-->
    </properties>


    <dependencyManagement>
        <dependencies>
            <!-- 公共子模块 -->
            <dependency>
                <groupId>com.yier</groupId>
                <artifactId>common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- 服务子模块 -->
            <dependency>
                <groupId>com.yier</groupId>
                <artifactId>service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- 定时任务子模块 -->
            <dependency>
                <groupId>com.yier</groupId>
                <artifactId>task</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- api子模块 -->
            <dependency>
                <groupId>com.yier</groupId>
                <artifactId>platform</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- web,h5子模块 -->
            <dependency>
                <groupId>com.yier</groupId>
                <artifactId>web</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring.boot.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <!-- 在生产环境中，需要实时或定期监控服务的可用性。对应用系统的自省和监控的集成功能，可以对应用系统进行配置查看、相关功能统计等 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>



            <!-- eureka注册中心 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-eureka</artifactId>
                <version>1.4.5.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                <version>2.0.1.RELEASE</version>
            </dependency>
            <!-- 声明式、模板化的HTTP客户端 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-openfeign</artifactId>
                <version>2.0.1.RELEASE</version>
            </dependency>
            <!--  观谷内部药品范围接口项目 -->
            <dependency>
                <groupId>cc.ccae</groupId>
                <artifactId>yry-service-drug-query-sdk</artifactId>
                <version>1.0.0-SNAPSHOT</version>
            </dependency>

            <!-- Spring Boot包含一组附加的开发期工具 上面的 <optional>true</optional> 是一个最佳实践，可以有效阻止用于其他模块。 -->
            <!--<dependency>-->
                <!--<groupId>org.springframework.boot</groupId>-->
                <!--<artifactId>spring-boot-devtools</artifactId>-->
                <!--<version>${spring.boot.version}</version>-->
                <!--<optional>true</optional>-->
            <!--</dependency>-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>1.3.2</version>
            </dependency>
            <dependency>
                <groupId>dom4j</groupId>
                <artifactId>dom4j</artifactId>
                <version>1.6.1</version>
            </dependency>
            <!-- mysql 驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <scope>runtime</scope>
                <!--<version>8.0.11</version>-->
                <version>5.1.46</version>
            </dependency>
            <!-- 数据库连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.1.10</version>
            </dependency>

            <!-- 模板渲染引擎 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-thymeleaf</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <!-- 引入freeMarker的依赖包. -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-freemarker</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- 切面处理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <!-- 融云 IM 即时通讯 -->
            <dependency>
                <groupId>cn.rongcloud.im</groupId>
                <artifactId>server-sdk-java</artifactId>
                <version>3.0.1</version>
            </dependency>

            <!-- mybatis 自动生成
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator</artifactId>
                <version>1.3.5</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>
            </dependency>
    -->
            <!-- spring 事务机制处理 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>

                <version>5.0.7.RELEASE</version>
            </dependency>

            <!-- StringUtils 等工具 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.8.1</version>
            </dependency>

            <!-- http 同步请求工具包 -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpasyncclient</artifactId>
                <version>4.1.3</version>
            </dependency>

            <!--springfox-swagger需要的最小依赖 start 一系列对 RESTful 接口进行规范描述和页面展示的工具. 通过 springfox-swagger 将 Swagger 与 Spring-MVC 整合, 可从代码中的注解获取信息, 并生成相应的文档-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>2.8.0</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>2.8.0</version>
            </dependency>

            <!-- 图片上传处理处理 -->
            <!-- FastDFS client with SpringBoot starter -->
            <dependency>
                <groupId>com.github.tobato</groupId>
                <artifactId>fastdfs-client</artifactId>
                <version>1.26.3</version>
            </dependency>

            <!-- lombok 可以引入日志 @Slf4j注解-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.2</version>
            </dependency>


            <!-- io 读取改成UTF等处理 -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.6</version>
            </dependency>

            <!--&lt;!&ndash; CollectionUtils 集合处理工具 &ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>org.apache.commons</groupId>-->
            <!--<artifactId>commons-collections4</artifactId>-->
            <!--<version>4.1</version>-->
            <!--</dependency>-->


            <!-- 阿里云的短信接口 -->
            <dependency>
                <groupId>com.aliyun</groupId>
                <artifactId>aliyun-java-sdk-core</artifactId>
                <version>4.0.7</version>
                <!--<version>3.7.1</version>-->
            </dependency>
            <dependency>
                <groupId>com.aliyun</groupId>
                <artifactId>aliyun-java-sdk-dysmsapi</artifactId>
                <version>1.1.0</version>
            </dependency>

            <dependency>
                <groupId>com.alipay.sdk</groupId>
                <artifactId>alipay-sdk-java</artifactId>
                <version>3.3.87.ALL</version>
            </dependency>
            <!-- RandomUtils 随机数生成 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>1.4</version>
            </dependency>

            <!-- 本地json依赖短信验证需要 -->
            <dependency>
                <groupId>org.json</groupId>
                <artifactId>json</artifactId>
                <version>20180813</version>
            </dependency>

            <!-- servlet-api需要 -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>4.0.1</version>
                <scope>provided</scope>
            </dependency>



            <!--  极光推送JPush API Java Library -->
            <dependency>
                <groupId>cn.jpush.api</groupId>
                <artifactId>jpush-client</artifactId>
                <version>3.3.7</version>
            </dependency>
            <!--  阿里云对象存储服务（Object Storage Service，简称OSS）为您提供基于网络的数据存取服务 -->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>3.1.0</version>
            </dependency>

            <!--  Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。 -->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>3.4.0</version>
            </dependency>
            <!--  应卓JWT管理 -->
            <dependency>
                <groupId>com.github.yingzhuo</groupId>
                <artifactId>carnival-spring-boot-starter-jwt</artifactId>
                <version>1.1.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--  parent 模块的pom文件中添加 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中 -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>
